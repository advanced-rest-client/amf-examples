#%RAML 1.0
title: Query example
version: v1
baseUri: http://api.domain.com/{version}/

annotationTypes:
  annotationTest: nil
  deprecated: string
  clearanceLevel:
    properties:
      level:
        enum: [ low, medium, high ]
        required: true
      signature:
        pattern: "\\d{3}-\\w{12}"
        required: true
types:
  Person:
    properties:
      name:
        type: string
        description: Name of the person
      email:
        type: string
      image:
        type: file
        fileTypes: ['image/jpeg', 'image/png']
      age:
        type: number
        description: Age of the person.
  File:
    properties:
      originalName:
        type: string
        description: Original file name.
      created:
        type: datetime
        description: Original file creation time
      file:
        type: file
        description: File content stored on the server.
  Oauth2paramsType:
    properties:
      grant_type:
        type: string
        description: OAuth2
        enum: [authorization_code, password, client_credentials, refresh_token]
      code:
        type: string
        description: Code property returned by the authorization server.
      redirect_uri:
        type: string
        description: Registered redirect URI
      client_id:
        type: string
        description: Registered client id
  Image:
    description: |
      Type describing an image resource
    displayName: Product image
    example:
      type: hd
      url: http://image.com/hd
    type: object
    minProperties: 1
    maxProperties: 2
    properties:
      type:
        type: string
        enum: [thumb, full, hd, 4k]
      url: string
  WebFile:
    description: A file that exists on an external server
    type: object
    properties:
      name:
        type: string
        displayName: File title
        description: |
          A file description
      url:
        type: string
        description: |
          Complete URL to the file.
  Product:
    displayName: A product resource
    description: A single product representing an item in the store.
    type: object
    properties:
      id:
        description: |
          Product id. It is a UUID of the database record.
          __This property will be ignored when creating an object.__
          It will be available when the product is stored in the datastore.
        pattern: "[0-9a-zA-Z-]+"
      name:
        type: string
        description: Product name
        example: Acme product - mentol flavor, 500 ml.
        required: true
      quantity:
        type: number
        description: |
          The quantity of the product in the one unit of measurement.
          See `unit` property for more information.
        example: 500
        required: true
      unit:
        type: string
        description: The unit of measuremet for the quantity property.
        example: ml
        required: true
      upc:
        type: string
        pattern: "[0-9]{12,12}"
        description: |
          The Universal Produc Code. It consists of 12 numerical digits. However, because of the
          integer precision limitation in JavaScript it is represented as a string.
        example: "042100005264"
        required: true
      available:
        type: boolean
        description: |
          Product current availability in the store.
          Product may be not available but the users still can order it with later delivery date.
        required: true
        example: true
      images: Image[]
      documentation:
        description: |
          A PDF file with specoification.
        type: WebFile
      icon:
        type: Image
        required: false
        description: File icons
    example:
      id: we2322-4f4f4f-f4f4ff-f4f4ff4
      name: Acme Product
      quantity: 200
      unit: ml
      upc: "123456789101"
      available: true
      images:
        - type: thumb
          url: https://domain.com
      documentation:
        name: Test doc
        url: https://files.domain.com/file
securitySchemes:
  basic:
    type: Basic Authentication
    description: Hello auth
  oauth: !include oauth2.raml

/endpoint:
  securedBy: [oauth]
  post:
    body:
      application/json:
        type: Person
  get:
    securedBy: [null, basic, oauth]
    responses:
      200:
        body:
          application/json:
            type: Product
/product:
  get:
    responses:
      200:
        body:
          application/json:
            type: Product
  post:
    securedBy: [basic]
    body:
      application/json:
        displayName: Test
        type: Product
        description: Test method with payload.
      application/xml:
        displayName: Test XML
        type: Product
      application/x-www-form-urlencoded:
        displayName: Test URL encoded
        type: Oauth2paramsType
      multipart/form-data:
        displayName: Test Form Data
        type: object
        properties:
          name: string
          value?:
            type: string
            example: test
            default: test
/file:
  put:
    body:
      image/*:
        type: file
        fileTypes: ['image/*']
  post:
    body:
      multipart/form-data:
        type: File
/test:
  post:
    body:
      multipart/form-data:
        type: Person
